{
    "totalHits": 44878,
    "limit": 1,
    "offset": 0,
    "scrollId": null,
    "results": [
        {
            "acceptedDate": null,
            "arxivId": "1802.06993",
            "authors": [
                {
                    "name": "Chen, Ting"
                },
                {
                    "name": "Jiang, Peng"
                },
                {
                    "name": "Li, Xiaoqi"
                },
                {
                    "name": "Luo, Xiapu"
                },
                {
                    "name": "Wen, Qiaoyan"
                }
            ],
            "citationCount": null,
            "contributors": [],
            "outputs": [
                "https://api.core.ac.uk/v3/outputs/151252397"
            ],
            "createdDate": "2018-03-05T19:53:05",
            "dataProviders": [
                {
                    "id": 144,
                    "name": "",
                    "url": "https://api.core.ac.uk/v3/data-providers/144",
                    "logo": "https://api.core.ac.uk/data-providers/144/logo"
                }
            ],
            "depositedDate": null,
            "abstract": "Since its inception, the blockchain technology has shown promising\napplication prospects. From the initial cryptocurrency to the current smart\ncontract, blockchain has been applied to many fields. Although there are some\nstudies on the security and privacy issues of blockchain, there lacks a\nsystematic examination on the security of blockchain systems. In this paper, we\nconduct a systematic study on the security threats to blockchain and survey the\ncorresponding real attacks by examining popular blockchain systems. We also\nreview the security enhancement solutions for blockchain, which could be used\nin the development of various blockchain systems, and suggest some future\ndirections to stir research efforts into this area.Comment: Published in Journal: Future Generation Computer Systems (2020",
            "documentType": "research",
            "doi": null,
            "downloadUrl": "http://arxiv.org/abs/1802.06993",
            "fieldOfStudy": null,
            "fullText": "A Survey on the Security of Blockchain Systems\nXiaoqi Lia, Peng Jianga, Ting Chenb, Xiapu Luoa,\u2217, Qiaoyan Wenc\naDepartment of Computing, The Hong Kong Polytechnic University, Hong Kong\nbCenter for Cybersecurity, University of Electronic Science and Technology of China, China\ncState Key Laboratory of Networking and Switching Technology, Beijing University of Posts and\nTelecommunications, China\nAbstract\nSince its inception, the blockchain technology has shown promising application prospects.\nFrom the initial cryptocurrency to the current smart contract, blockchain has been applied\nto many fields. Although there are some studies on the security and privacy issues of\nblockchain, there lacks a systematic examination on the security of blockchain systems. In\nthis paper, we conduct a systematic study on the security threats to blockchain and survey\nthe corresponding real attacks by examining popular blockchain systems. We also review\nthe security enhancement solutions for blockchain, which could be used in the development\nof various blockchain systems, and suggest some future directions to stir research efforts into\nthis area.\nKeywords: blockchain, security, cryptocurrency, smart contract\n1. Introduction\nSince the debut of Bitcoin in 2009, its underlying technique, blockchain, has shown\npromising application prospects and attracted lots of attentions from academia and indus-\ntry. Being the first cryptocurrency, Bitcoin was rated as the top performing currency in\n2015 [1] and the best performing commodity in 2016 [2], and has more than 300K con-\nfirmed transactions [3] daily in May, 2017. At the same time, the blockchain technique\nhas been applied to many fields, including medicine [4, 5, 6], economics [7, 8, 9], Inter-\nnet of things [10, 11, 12], software engineering [13, 14, 15] and so on. The introduction of\nTuring-complete programming languages to enable users to develop smart contracts running\non the blockchain marks the start of blockchain 2.0 era. With the decentralized consensus\nmechanism of blockchain, smart contracts allow mutually distrusted users to complete data\nexchange or transaction without the need of any third-party trusted authority. Ethereum is\n\u2217Corresponding author\nEmail addresses: csxqli@comp.polyu.edu.hk (Xiaoqi Li), cspjiang@comp.polyu.edu.hk\n(Peng Jiang), brokendragon@uestc.edu.cn (Ting Chen), csxluo@comp.polyu.edu.hk (Xiapu Luo),\nwqy@bupt.edu.cn (Qiaoyan Wen)\n1\nar\nX\niv\n:1\n80\n2.\n06\n99\n3v\n2 \n [c\ns.C\nR]\n  6\n M\nar \n20\n18\nnow (May of 2017) the most widely used blockchain supporting smart contracts, where there\nare already 317,506 smart contracts and more than 75,000 transactions happened daily [16].\nSince blockchain is one of the core technology in FinTech (Financial Technology) industry,\nusers are very concerned about its security. Some security vulnerabilities and attacks have\nbeen recently reported. Loi et al. discover that 8,833 out of 19,366 existing Ethereum\ncontracts are vulnerable [17]. Note that smart contracts with security vulnerabilities may\nlead to financial losses. For instance, in June 2016, the criminals attacked the smart contract\nDAO [18] by exploiting a recursive calling vulnerability, and stole around 60 million dollars.\nAs another example, in March 2014, the criminals exploited transaction mutability in Bitcoin\nto attack MtGox, the largest Bitcoin trading platform. It caused the collapse of MtGox, with\na value of 450 million dollars Bitcoin stolen [19].\nAlthough there are some recent studies on the security of blockchain, none of them\nperforms a systematic examination on the risks to blockchain systems, the corresponding\nreal attacks, and the security enhancements. The closest research work to ours is [20]\nthat only focuses on Ethereum smart contracts, rather than popular blockchain systems.\nFrom security programming perspective, their work analyzes the security vulnerabilities of\nEthereum smart contracts, and provides a taxonomy of common programming pitfalls that\nmay lead to vulnerabilities [20]. Although a series of related attacks on smart contracts are\nlisted in [20], there lacks a discussion on security enhancement. This paper focuses on the\nsecurity of blockchain from more comprehensive perspectives. The main contributions of\nthis paper are as follows:\n(1). To the best of our knowledge, we conduct the first systematic examination on\nsecurity risks to popular blockchain systems.\n(2). We survey the real attacks on popular blockchain systems from 2009 to the present\n(May of 2017) and analyze the vulnerabilities exploited in these cases.\n(3). We summarize practical academic achievements for enhancing the security of blockchain,\nand suggest a few future directions in this area.\nThe remainder of this paper is organized as follows. Section 2 introduces the main\ntechnologies used in blockchain systems. Section 3 systematically examines the security risks\nto blockchain, and Section 4 surveys real attacks on blockchain systems. After summarizing\nthe security enhancements to blockchain in Section 5, we suggest a few future directions in\nSection 6. Finally, Section 7 concludes the paper.\n2. Overview of Blockchain Technologies\nThis section introduces the main technologies employed in blockchain. We first present\nthe fundamental trust mechanism (i.e., the consensus mechanism) used in blockchain, and\nthen explain the synchronization process between nodes. After that, we introduce the two\ndevelopment stages of blockchain.\n2.1. Consensus Mechanism\nBeing a decentralized system, blockchain systems do not need a third-party trusted au-\nthority. Instead, to guarantee the reliability and consistency of the data and transactions,\n2\nblockchain adopts the decentralized consensus mechanism. In the existing blockchain sys-\ntems, there are four major consensus mechanisms [21]: PoW (Proof of Work), PoS (Proof\nof Stake), PBFT (Practical Byzantine Fault Tolerance), and DPoS (Delegated Proof of\nStake). Other consensus mechanisms, such as PoB (Proof of Bandwidth) [22], PoET (Proof\nof Elapsed Time) [23], PoA(Proof of Authority) [24] and so on, are also used in some\nblockchain systems. The two most popular blockchain systems (i.e., Bitcoin and Ethereum)\nuse the PoW mechanism. Ethereum also incorporates the PoA mechanism (i.e., Kovan pub-\nlic test chain [25]), and some other cryptocurrencies also use the PoS mechanism, such as\nPeerCoin, ShadowCash and so on.\nCompute puzzle\nSolve puzzle\nCreate block\nVerify puzzle\nVerify puzzle\nNode A\nNode B\nNode C\nOther nodes\nBroadcast\nFigure 1: PoW consensus mechanism\nPoW mechanism uses the solution of puzzles to prove the credibility of the data. The\npuzzle is usually a computationally hard but easily verifiable problem. When a node creates a\nblock, it must resolve a PoW puzzle. After the PoW puzzle is resolved, it will be broadcasted\nto other nodes, so as to achieve the purpose of consensus, as shown in Fig.1.\nIn different blockchain systems, the block structure may vary in detail. Typically in\nBitcoin, each block contains PrevHash, nonce, and Tx [26]. In particular, PrevHash indicates\nthe hash value of the last generated block, and Txs denote the transactions included in this\nblock. The value of nonce is obtained by solving the PoW puzzle. A correct nonce should\nsatisfy that the hash value shown in Equation 1 is less than a target value, which could be\nadjusted to tune the difficulty of PoW puzzle.\nSHA256(PrevHash ||Tx1 ||Tx2 || ... ||nonce) < Target (1)\nPoS mechanism uses the proof of ownership of cryptocurrency to prove the credibility\nof the data. In PoS-based blockchain, during the process of creating block or transaction,\nusers are required to pay a certain amount of cryptocurrency. If the block or transaction\ncreated can eventually be validated, the cryptocurrency will be returned to the original\nnode as a bonus. Otherwise, it will be fined. In the PoW mechanism, it needs a lot of\ncalculation, resulting in a waste of computing power. On the contrary, PoS mechanism can\ngreatly reduce the amount of computation, thereby increasing the throughput of the entire\nblockchain system.\n3\n2.2. Block Propagation and Synchronization\nRequest latest block header\nRequest MaxHeaderFetch \nblock header\nSearch common ancestor\nNode A\nGetBlockHeaders\nRequest blocks from \ncommon ancestor\nBlock header\nBlock body\nNode B\nBlock header\nBlock body\nOther blocks\nBlockHeaders\nBlockHeaders\nGetBlockHeaders\nGetBlockHeaders\nGetBlockBodies\nBlockBodies\nBlockHeaders\nFigure 2: Block synchronization process between nodes\nIn the blockchain, each full node stores the information of all blocks. Being the foundation\nto building consensus and trust for blockchain, the block propagation mechanisms can be\ndivided into the following categories [27, 28, 68]:\n(1). Advertisement-based propagation. This propagation mechanism is originated from\nBitcoin. When node A receives the information of a block, A will send an inv message (a\nmessage type in Bitcoin) to its connected peers. When node B receives the inv message\nfrom A, it will do as follows. If node B already has the information of this block, it will do\nnothing. If node B does not have the information, it will reply to node A. When node A\nreceives the reply message from node B, node A will send the complete information of this\nblock to node B.\n(2). Sendheaders propagation. This propagation mechanism is an improvement to the\nadvertisement-based propagation mechanism. In the sendheaders propagation mechanism,\nnode B will send a sendheaders message (a message type in Bitcoin) to node A. When node\nA receives the information of a block, it will send the block header information directly to\nnode B. Compared with the advertisement-based propagation mechanism, node A does not\nneed to send inv messages, and hence it speeds up the block propagation.\n(3). Unsolicited push propagation. In the unsolicited push mechanism, after one block\nis mined, the miner will directly broadcast the block to other nodes. In this propagation\nmechanism, there is no inv message and sendheaders message. Compared with the previous\ntwo propagation mechanisms, unsolicited push mechanism can further improve the speed of\nblock propagation.\n(4). Relay network propagation. This propagation mechanism is an improvement to the\nunsolicited push mechanism. In this mechanism, all the miners share a transaction pool.\nEach transaction is replaced by a global ID, which will greatly reduce the broadcasted block\nsize, thereby further reducing the network load and improving the propagation speed.\n(5). Push/Advertisement hybrid propagation. This hybrid propagation mechanism is\nused in Ethereum. We assume that node A has n connected peers. In this mechanism, node\n4\nA will push the block to\n\u221a\nn peers directly. For the other n \u2212\u221an connected peers, node A\nwill advertise the block hash to them.\nDifferent blockchain systems may use diverse block synchronization processes. In Ethereum,\nnode A can request block synchronization from node B with more total difficulty. The specific\nprocess is as follows (shown in Fig.2) [27, 28, 68]:\n(1). Node A requests the header of the latest block from node B. This action is imple-\nmented by sending a GetBlockHeaders message. Node B will reply to node A a BlockHeaders\nmessage that contains the block header requested by A.\n(2). Node A requests MaxHeaderFetch blocks to find common ancestor from node B. The\ndefault value of MaxHeaderFetch is 256, but the number of block headers sent by node B to\nA can be less than this value.\n(3). If A has not found common ancestor after the above two steps, node A will continue\nto send GetBlockHeaders message, requesting one block header each time. Moreover, A\nrepeats in binary search to find the common ancestor in its local blockchain.\n(4). After node A discovers a common ancestor, A will request block synchronization\nfrom the common ancestor. In this process, A requests MaxHeaderFetch blocks per request,\nbut the actual number of nodes sent from B to A can be less than this value.\nFigure 3: Query Bitcoin trans-\naction history\nFigure 4: Pay with Bitcoin Figure 5: Collect payments with\nBitcoin\n2.3. Technology Development\nFrom the birth of the first blockchain system Bitcoin, the blockchain technology has\nexperienced two stages of development: blockchain 1.0 and blockchain 2.0.\nIn the blockchain 1.0 stage, the blockchain technology is mainly used for cryptocurrency.\nIn addition to Bitcoin, there are many other types of cryptocurrencies, such as Litecoin,\nDogecoin and so on. There are currently over 700 types of cryptocurrencies, and the total\nmarket capitalizations of them are over 26 billion US$ [30]. The technology stack of cryp-\ntocurrency could be divided into two layers: the underlying decentralized ledger layer and\nprotocol layer [31]. Cryptocurrency client, such as Bitcoin Wallet [32], runs in the proto-\n5\ncol layer to conduct transactions, as shown in Fig.3 to Fig.5. Compared with traditional\ncurrency, cryptocurrency has the following characteristics and advantages [33]:\n(1). Irreversible and traceable. Transfer and payment operations are irreversible using\ncryptocurrency. Once the behavior is completed, it is impossible to withdraw. In addition,\nall user behaviors are traceable, and these behaviors are permanently saved in the blockchain.\n(2). Decentralized and anonymous. There is no third-party organization involved in\nthe entire structure of cryptocurrency, nor does it has central management like banks. In\naddition, all user behaviors are anonymous. Hence, according to the transaction information,\nwe cannot obtain the user\u2019s real identity.\n(3). Secure and permissionless. The security of the cryptocurrency is ensured by the\npublic key cryptography and the blockchain consensus mechanism, which are hard to be\nbroken by the criminal. Moreover, there is no need to apply for any authority or permission\nto use cryptocurrency. Users can simply use the cryptocurrency through the relevant clients.\n(4). Fast and global. Transactions can be completed in only several minutes using\ncryptocurrency. Since cryptocurrencies are mostly based on public chains, anyone in the\nworld can use them. Therefore, the user\u2019s geographical location has little impact on the\ntransaction speed.\nSolidity compiler: solc\nParity\nDevelopment\nDeploy by transaction\nSource code: *.sol\nContracts bytecode \nand ABI\nGeth\nPythereum\nCpp-\nethereum\nEthereum node\nEthereum \nblockchain\nInteract by transaction\nContract address\nFigure 6: The process of smart contract\u2019s development, deployment, and interaction\nTable 1: Statistics of blockchain systems supporting smart contracts (until May of 2017)\nSystem Contract language Total TXs Market Capitalization /M US$\nEthereum EVM bytecode 23,102,544 8,468\nRSK Solidity Unknown N/A\nCounterparty EVM bytecode 12,170,386 15\nStellar Transaction chains Unknown 139\nMonax EVM bytecode Unknown N/A\nLisk JavaScript Unknown 71\nIn blockchain 2.0 stage, smart contract is introduced so that developers can create various\napplications through smart contracts. A smart contract can be considered as a lightweight\ndAPP (decentralized application). Ethereum is a typical system of blockchain 2.0. Each\nEthereum node runs an EVM (Ethereum Virtual Machine) that executes smart contracts.\nBesides Ethereum, several other blockchain systems also support smart contracts, whose\n6\ninformation is listed in Table 1 [34]. In Ethereum, developers can use a variety of program-\nming languages to develop smart contracts, such as Solidity (the recommended language),\nSerpent, and LLL. Since these languages are Turing-complete, smart contracts can achieve\nrich functions. Fig.6 shows the process of smart contracts\u2019 development, deployment and\ninteraction. Each deployed smart contract corresponds to a unique address, through which\nusers can interact with the smart contract through transactions by different clients (e.g.,\nParity, Geth, etc.). Since smart contracts can call each other through messages, developers\ncan develop more feature-rich dAPPs based on available smart contracts. Compared with\nthe traditional application, a dAPP has the following characteristics and advantages [35]:\n(1). Autonomy. dAPPs are developed on the basis of smart contracts, and smart con-\ntracts are deployed and run on the blockchain. Hence, dAPPs can run autonomically without\nthe need of any third party\u2019s assistance and participation.\n(2). Stable. The bytecodes of smart contracts are stored in the state tree of blockchain.\nEach full node saves the information of all blocks and stateDB, including the bytecodes\nof smart contracts. Hence, the failure of some nodes will not affect its operation. This\nmechanism ensures that dAPPs can run stably.\n(3). Traceable. Since the invocation information of smart contracts is stored in the\nblockchain as transactions, all the behaviors of dAPPs are recorded and traceable.\n(4). Secure. The public key cryptography and the blockchain consensus mechanism can\nensure the security and correct operations of smart contracts, so as to maximize the security\nof dAPPs.\n3. Risks to Blockchain\nTable 2: Taxonomy of blockchain\u2019s risks\nNumber Risk Cause Range of Influence\n3.1.1 51% vulnerability Consensus mechanism\nBlockchain1.0, 2.0\n3.1.2 Private key security Public-key encryption scheme\n3.1.3 Criminal activity Cryptocurrency application\n3.1.4 Double spending Transaction verification mechanism\n3.1.5 Transaction privacy leakage Transaction design flaw\n3.2.1 Criminal smart contracts Smart contract application\nBlockchain2.0\n3.2.2 Vulnerabilities in smart contract Program design flaw\n3.2.3 Under-optimized smart contract Program writing flaw\n3.2.4 Under-priced operations EVM design flaw\nWe divide the common blockchain risks into nine categories, as shown in Table 2, and\ndetail the causes and possible consequence of each risk. The risks described in Section 3.1\nexist in blockchain 1.0 and 2.0, and their causes are mostly related to the blockchain oper-\nation mechanism. By contrast, the risks introduced in Section 3.2 are unique to blockchain\n2.0, and are usually resulted from the development, deployment, and execution of smart\ncontracts.\n3.1. Common Risks to Blockchain 1.0 and 2.0\n3.1.1. 51% Vulnerability\nThe blockchain relies on the distributed consensus mechanism to establish mutual trust.\nHowever, the consensus mechanism itself has 51% vulnerability, which can be exploited by\n7\nattackers to control the entire blockchain. More precisely, in PoW-based blockchains, if a\nsingle miner\u2019s hashing power accounts for more than 50% of the total hashing power of\nthe entire blockchain, then the 51% attack may be launched. Hence, the mining power\nconcentrating in a few mining pools may result in the fears of an inadvertent situation,\nsuch as a single pool controls more than half of all computing power. In Jan. 2014, after\nthe mining pool ghash.io reached 42% of the total Bitcoin computing power, a number\nof miners voluntarily dropped out of the pool, and ghash.io issued a press statement to\nreassure the Bitcoin community that it would avoid reaching the 51% threshold [36]. In\nPoS-based blockchains, 51% attack may also occur if the number of coins owned by a single\nminer is more than 50% of the total blockchain. By launching the 51% attack, an attacker\ncan arbitrarily manipulate and modify the blockchain information. Specifically, an attacker\ncan exploit this vulnerability to conduct the following attacks [37]:\n(1). Reverse transactions and initiate double spending attack (the same coins are spent\nmultiple times).\n(2). Exclude and modify the ordering of transactions.\n(3). Hamper normal mining operations of other miners.\n(4). Impede the confirmation operation of normal transactions.\n3.1.2. Private Key Security\nWhen using blockchain, the user\u2019s private key is regarded as the identity and security\ncredential, which is generated and maintained by the user instead of third-party agencies.\nFor example, when creating a cold storage wallet in Bitcoin blockchain, the user must import\nhis/her private key. Hartwig et al. [38] discover a vulnerability in ECDSA (Elliptic Curve\nDigital Signature Algorithm) scheme, through which an attacker can recover the user\u2019s\nprivate key because it does not generate enough randomness during the signature process.\nOnce the user\u2019s private key is lost, it will not be able to be recovered. If the private\nkey is stolen by criminals, the user\u2019s blockchain account will face the risk of being tampered\nby others. Since the blockchain is not dependent on any centralized third-party trusted\ninstitutions, if the user\u2019s private key is stolen, it is difficult to track the criminal\u2019s behaviors\nand recover the modified blockchain information.\n3.1.3. Criminal Activity\nTable 3: Top 10 categories of items available in Silk Road\nNumber Category Items Percentage\n1 Weed 3338 13.7%\n2 Drugs 2194 9.0%\n3 Prescription 1784 7.3%\n4 Benzos 1193 4.9%\n5 Books 955 3.9%\n6 Cannabis 877 3.6%\n7 Hash 820 3.4%\n8 Cocaine 630 2.6%\n9 Pills 473 1.9%\n10 Blotter (LSD) 440 1.8%\n8\nBitcoin users can have multiple Bitcoin addresses, and the address has no relationship\nwith their real life identity. Therefore, Bitcoin has been used in illegal activities. Through\nsome third-party trading platforms that support Bitcoin, users can buy or sell any product.\nSince this process is anonymous, it is hard to track user behaviors, let alone subject to legal\nsanctions. Some frequent criminal activities with Bitcoin include:\n(1). Ransomware. The criminals often use ransomware for money extortion, and employ\nBitcoin as trading currency. In July 2014, a ransomware named CTB-Locker [39] spread\naround the world by disguising itself as mail attachments. If the user clicks the attachment,\nthe ransomware will run in the background of the system and encrypt about 114 types\nof each file [40]. The victim has to pay the attacker a certain amount of Bitcoin within\n96 hours. Otherwise, the encrypted files will not be restored. In May 2017, another ran-\nsomware WannaCry (also named as WannaCrypt) [41] infected about 230,000 victims across\n150 countries in two days. It exploited a vulnerability in Windows system to spread, and\nencrypted users\u2019 files to ask for Bitcoin ransom.\n(2). Underground market. Bitcoin is often used as the currency in the underground\nmarket. For example, Silk Road is an anonymous, international online marketplace that\noperates as a Tor hidden service and uses Bitcoin as its exchange currency [42]. The top 10\ncategories of items available in Silk Road are listed in Table 3 [42]. Most of the items sold\nin Silk Road are drugs, or some other controlled items in the real world. Since international\ntransactions account for a significant proportion in Silk Road, Bitcoin makes the transaction\nin the underground market more convenient, which will cause harm to the social security.\n(3). Money laundering. Since Bitcoin has the features like anonymity and network virtual\npayment and has been adopted by many countries, compared with other currencies, Bitcoin\ncarries the lowest risk of being used for money laundering [43]. Cody et al. propose Dark\nWallet [44], a Bitcoin application that can make Bitcoin transaction completely stealth and\nprivate. Dark Wallet can encrypt transaction information and mix the user\u2019s valid coins\nwith chaff coins, and hence it can make money laundering much easier.\n3.1.4. Double Spending\nAttacker\nTransaction to vendor\nVendor\nBitcoin \nnetwork\nMining pool\nTransaction to \ncolluding address\nTransaction to vendor\nTransaction to \ncolluding address\nFigure 7: Double spending attack model against fast payment in Bitcoin\nAlthough the consensus mechanism of blockchain can validate transactions, it is still\n9\nimpossible to avoid double spending [45]. Double spending refers to that a consumer uses\nthe same cryptocurrency multiple times for transactions. For example, an attacker could\nleverage race attack for double spending. This kind of attack is relatively easy to implement\nin PoW-based blockchains, because the attacker can exploit the intermediate time between\ntwo transactions\u2019 initiation and confirmation to quickly launch an attack. Before the second\ntransaction is mined to be invalid, the attacker has already got the first transaction\u2019s output,\nresulting in double spending.\nGhassan et al. [46] conduct an analysis of double spending against fast payment in\nBitcoin, and propose an attack model, as shown in Fig.7. Assuming that an attacker knows\nthe vendor\u2019s address before the attack, to perform double spending, the attacker will send\ntwo transactions, TXv and TXa and choose the same BTCs (cryptocurrency in Bitcoin) as\ninputs for TXv and TXa. TXv\u2019s recipient address is set to the targeted vendor\u2019s address,\nand TXa\u2019s recipient address is set to the colluding address controlled by the attacker. If the\nfollowing three conditions are met, double spending will be successful: (1) TXv is added to\nthe wallet of the targeted vendor; (2) TXa is mined as valid into the blockchain; (3) The\nattacker gets TXv\u2019s output before the vendor detects misbehavior. If the attack is successful,\nTXv will eventually be verified as an invalid transaction, and BTCs are really spent by TXa.\nThe attacker has received TXv\u2019s output, which is the vendor\u2019s normal service. Since TXa\u2019s\nrecipient address is controlled by the attacker, these BTCs are still owned by herself. In this\ndouble spending model, the attacker enjoys the service without paying any BTC.\n3.1.5. Transaction Privacy Leakage\nSince the users\u2019 behaviors in the blockchain are traceable, the blockchain systems take\nmeasures to protect the transaction privacy of users. In the Bitcoin and Zcash, they use\none-time accounts to store the received cryptocurrency. Moreover, the user needs to as-\nsign a private key to each transaction. In this way, the attacker cannot infer whether the\ncryptocurrency in different transactions is received by the same user. In Monero, users\ncan include some chaff coins (called \u201cmixins\u201d) when they initiate a transaction so that the\nattacker cannot infer the linkage of actual coins spent by the transaction.\nTable 4: Linkability analysis of Monera transaction inputs with mixins\nNot deducible Deducible In total\nUsing newest TXO 15.07% 4.60% 19.67%\nNot using newest TXO 22.61% 57.72% 80.33%\nIn total 37.68% 62.32% 100%\nUnfortunately, the privacy protection measures in blockchain are not very robust. An-\ndrews et al. [47] empirically evaluate two linkability weaknesses in Monero\u2019s mixin sampling\nstrategy, and discover that 66.09% of all transactions do not contain any mixins. 0-mixin\ntransaction will lead to the privacy leakage of its sender. Since users may use the outputs\nof 0-mixin transaction as mixins, these mixins will be deducible. Moreover, they study the\nsampling method of mixins and find that the selection of mixins is not really random. Newer\nTXOs (transaction outputs) tend to be used more frequently. They further discover that\n62.32% of transaction inputs with mixins are deducible, as shown in Table 4 [47]. By ex-\n10\nploiting these weaknesses in Monero, they can infer the actual transaction inputs with 80%\naccuracy.\n3.2. Specific Risks to Blockchain 2.0\n3.2.1. Criminal Smart Contracts\nPwdTheft\nApp\nSGX-enabled host\nServer\nPKC, A\nct, \u0431, \u03b1\nenclave\nPW\nHTTPS login \nby PW\nFigure 8: Execution procedure of PwdTheft using SGX-enabled platform\nCriminals can leverage smart contracts for a variety of malicious activities, which may\npose a threat to our daily life. CSCs (Criminal Smart Contracts) can facilitate the leakage\nof confidential information, theft of cryptographic keys, and various real-world crimes (e.g.,\nmurder, arson, terrorism, etc.) [48]. Juels et al. propose an example of password theft\nCSC PwdTheft, whose process is shown in Fig.8 [48]. PwdTheft can be exploited for a fair\nexchange between contractor C and perpetrator P. C will pay a reward to P if and only if P\ngives a valid password to C. The entire transaction process can be done without any third\nparty trusted agencies involved. Since the smart contract deployed in blockchain cannot\naccess network directly [49], in the actual work process of PwdTheft, it is combined with\ntrusted hardware technology, such as Intel SGX (Software Guard eXtension), to prove the\nvalidity of the password through HTTPS (Hypertext Transfer Protocol Secure). SGX will\ncreate a trusted execution environment named enclave, which can protect the application\nfrom being attacked by others. Any privileged or unprivileged software cannot access the\nruntime environment of enclave. Furthermore, SGX can produce quote, a digitally signed\nattestation. Quote can get the hash value of the application run in enclave environment.\nMeanwhile, quote can access the relevant data during runtime of the application. The whole\npassword exchange process is divided into three steps:\n(1). PwdTheft provides (pkC , A), pkC is the public key of C, and A is the target account\nfor stealing.\n(2). The application that runs in SGX, using the PW provided by P, logs on to the server\naccount A by establishing an HTTPS connection.\n(3). If the preceding steps are successful, the data ct, \u03c3 and \u03b1 will be transmitted to\nPwdTheft. ct = encpkC [PW ] and \u03c3 = Sigskapp [ct]. skapp is the signature private key of the\napplication. \u03b1 is a quote that runs on P\u2019s SGX-enabled host.\nAfter PwdTheft receives ct, \u03c3 and \u03b1, C can decrypt them to verify the data, and then\ndecide whether a reward should be paid to P. In this process, in order to prevent P from\nchanging the password maliciously after the data transmission to PwdTheft, they can add a\ntimestamp in the data. In addition, PwdTheft can be easily extended for conducting other\n11\nmalicious activities. For example, criminals can leverage CSCs to make 0-day vulnerability\ntransactions, which are critical cyber-weaponry [48].\n3.2.2. Vulnerabilities in Smart Contract\nTable 5: Taxonomy of vulnerabilities in smart contract\nNumber Vulnerability Cause Level\n1 Call to the unknown The called function does not exist\nContract source code\n2 Out-of-gas send Fallback of the callee is executed\n3 Exception disorder Irregularity in exception handling\n4 Type casts Type-check error in contract execution\n5 Reentrancy vulnerability Function is re-entered before termination\n6 Field disclosure Private value is published by the miner\n7 Immutable bug Alter a contract after deployment\nEVM bytecode8 Ether lost Send Ether to an orphan address\n9 Stack overflow The number of values in stack exceeds 1024\n10 Unpredictable state State of the contract is changed before invoking\nBlockchain mechanism11 Randomness bug Seed is biased by malicious miner\n12 Timestamp dependence Timestamp of block is changed by malicious miner\nAs programs running in the blockchain, smart contracts may have security vulnerabilities\ncaused by program defects. Nicola et al. [20] conduct a systematic investigation of 12 types\nof vulnerabilities in smart contract, as shown in Table 5. Loi et al. [17] propose a symbolic\nexecution tool called Oyente to find 4 kinds of potential security bugs. They discover that\n8,833 out of 19,366 Ethereum smart contracts are vulnerable. The details of these 4 bugs\nare as follows:\n(1). Transaction-ordering dependence. Valid transactions can change the state of Ethereum\nblockchain from \u03c3 to \u03c3\u2032: \u03c3 T\u2192 \u03c3\u2032 . In every epoch, each miner proposes their own block to\nupdate the blockchain. Since a block may contain multiple transactions, blockchain state \u03c3\nmay change multiple times within an epoch. When a new block contains two transactions Ti\nand Tj, which invoke the same smart contract, it may trigger this vulnerability. Because the\nexecution of the smart contract is associated with state \u03c3, the execution order of Ti and Tj\naffects the ultimate state. The order of transactions\u2019 execution depends entirely on miners.\nIn this case, TOD (Transaction-Ordering Dependent) contracts are vulnerable.\n(2). Timestamp dependence. In the blockchain, every block has a timestamp. Some\nsmart contracts\u2019 trigger conditions depend on timestamp, which is set by the miner according\nto its local system time. If an attacker can modify it, timestamp-dependent contracts are\nvulnerable.\n(3). Mishandled exceptions. This category of vulnerability may occur when different\nsmart contracts are called from each other. When contract A calls contract B, if B runs\nabnormally, B will stop running and return false. In some invocations, contract A must\nexplicitly check the return value to verify if the call has been executed properly. If A does\nnot correctly check the exception information, it may be vulnerable.\n(4). Reentrancy vulnerability. During the invocation of the smart contract, the actual\nstate of the contract account is changed after the call is completed. An attacker can use the\nintermediate state to conduct repeated calls to the smart contract. If the invoked contract\ninvolves Ether transaction, it may result in illegal Ether stealing.\n12\n3.2.3. Under-Optimized Smart Contract\nTable 6: Taxonomy of under-optimized patterns in smart contract\nNumber Under-optimized pattern Category\n1 Dead code\nUseless-code related patterns\n2 Opaque predicate\n3 Expensive operations\nLoop-related patterns\n4 Constant outcome\n5 Loop fusion\n6 Repeated computations\n7 Comparison with unilateral outcome\nWhen a user interacts with a smart contract deployed in Ethereum, a certain amount of\ngas is charged. Gas can be exchanged with Ether, which is the cryptocurrency in Ethereum.\nUnfortunately, some smart contracts\u2019 development and deployment are not adequately op-\ntimized. Chen et al. [50] identify 7 gas-costly patterns and group them into 2 categories (as\nshown in Table 6): useless-code related patterns, and loop-related patterns. They propose\na tool named Gasper, which can automatically discover 3 gas-costly patterns in smart\ncontracts: dead code, opaque predicate, and expensive operations in a loop. Leveraging\nGasper, they find that more than 80% smart contracts deployed in Ethereum (4,240 real\nsmart contracts) have at least one of these 3 patterns. The details are as follows:\n(1). Dead code. It means that some operations in a smart contract will never be executed,\nbut they will still be deployed into the blockchain. Since in the smart contract deployment\nprocess the consumption of gas is related to bytecode size, the dead code will cause additional\ngas consumption.\n(2). Opaque predicate. For some statements in a smart contract, their execution results\nare always the same and will not affect other statements and the smart contract. The\npresence of the opaque predicate causes the EVM to execute useless operations, thereby\nconsuming additional gas.\n(3). Expensive operations in a loop. It refers to some expensive operations within a\nloop, which can be moved outside the loop to save gas consumption.\n3.2.4. Under-Priced Operations\nAs mentioned earlier, each operation is set to a specific gas value in Ethereum, which\ncan be queried in the yellow paper [51]. Ethereum sets the gas value based on the execution\ntime, bandwidth, memory occupancy and other parameters. In general, the gas value is\nproportional to the computing resources consumed by the operation. However, it is difficult\nto accurately measure the consumption of computing resources of an individual operation,\nand therefore some gas values are not set properly. For example, some IO-heavy operations\u2019\ngas values are set too low, and hence these operations can be executed in quantity in one\ntransaction. In this way, an attacker can initiate a DoS (Denial of Service) attack on\nEthereum.\nActually, attackers have exploited the under-priced operation EXTCODESIZE to attack\nEthereum [52]. When EXTCODESIZE is executed, it needs to read state information and then\nthe node will read hard disk. Since the gas value of EXTCODESIZE is only 20, the attacker\ncan call it more than 50,000 times in one transaction. This will cause the user to consume a\n13\nTable 7: Gas table modification in EIP150\nNumber Operation Old value EIP150 value\n1 EXTCODESIZE 20 700\n2 EXTCODECOPY 20 700\n3 BALANCE 20 400\n4 SLOAD 50 200\n5 CALL 40 700\n6 SUICIDE (does not create account) 0 5,000\n7 SUICIDE (creates an account) 0 25,000\nlot of computing resources, and block synchronization will be significantly slower compared\nwith the normal situation. As another example, some attackers exploited the under-priced\noperation SUICIDE to launch DoS attacks [53]. They exploited SUICIDE to create about 19\nmillion empty accounts, which need to be stored in the state tree. This attack caused a\nwaste of hard disk resources. At the same time, the node information synchronization and\ntransaction processing speed are significantly decreased.\nIn order to solve the security problem caused by under-priced operations, the gas values\nof 7 IO-heavy operations are modified in EIP (Ethereum Improvement Proposal) 150 [54], as\nshown in Table 7. Note that EIP150 has already been implemented in the Ethereum public\nchain by hard fork, and the new gas table parameters are used after No.2463000 block.\n4. Attack Cases\nIn this section, we survey real attacks on blockchain systems, and analyze the vulnera-\nbilities exploited in these attacks.\n4.1. Selfish Mining Attack\nThe selfish mining attack is conducted by attackers (i.e., selfish miners) for the purpose of\nobtaining undue rewards or wasting the computing power of honest miners [55]. The attacker\nholds discovered blocks privately and then attempts to fork a private chain [56]. Afterwards,\nselfish miners would mine on this private chain, and try to maintain a longer private branch\nthan the public branch because they privately hold more newly discovered blocks. In the\nmeanwhile, honest miners continue mining on the public chain. New blocks mined by the\nattacker would be revealed when the public branch approaches the length of private branch,\nsuch that the honest miners end up wasting computing power and gaining no reward, because\nselfish miners publish their new blocks just before honest miners. As a result, the selfish\nminers gain a competitive advantage, and honest miners would be incentivized to join the\nbranch maintained by selfish miners. Through a further consolidation of mining power into\nthe attacker\u2019s favor, this attack undermines the decentralization nature of blockchain.\nIttay et al. [56] propose an attack strategy named Selfish-Mine, which can force the\nhonest miners to perform wasted computations on the stale public branch. In the initial\ncircumstance of Selfish-Mine, the length of the public chain and private chain are the\nsame. The Selfish-Mine involves the following three scenarios:\n(1). The public chain is longer than the private chain. Since the computing power of\nselfish miners may be less than that of the honest miners, selfish miners will update the\n14\nprivate chain according to the public chain, and in this scenario, selfish miners cannot gain\nany reward.\n(2). Selfish miners and honest miners almost simultaneously find the first new block.\nIn this scenario, selfish miners will publish the newly discovered block, and there will be\ntwo concurrently forks of the same length. Honest miners will mine in either of the two\nbranches, while selfish miners will continue to mine on the private chain. If selfish miners\nfirstly find the second new block, they will publish this block immediately. At this point,\nselfish miners will gain two blocks\u2019 rewards at the same time. Because the private chain is\nlonger than the public chain, the private chain will be the ultimate valid branch. If honest\nminers firstly find the second new block and this block is written to the private chain, selfish\nminers will gain the first new block\u2019 rewards, and honest miners will gain the second new\nblock\u2019 rewards. Otherwise, if this block is written to the public block, honest miners will\ngain these two new blocks\u2019 rewards, and selfish miners will not gain any reward.\n(3). After selfish miners find the first new block, they also find the second new block. In\nthis scenario, selfish miners will hold these two new blocks privately, and they continue to\nmine new blocks on the private chain. When the first new block is found by honest miners,\nselfish miners will publish its own first new block. When honest miners find the second new\nblock, the selfish miners will immediately publish its own second new block. Then selfish\nminers will follow this response in turn, until the length of the public chain is only 1 greater\nthan the private chain, after which the selfish miners will publish its last new block before\nhonest miners find this block. At this point, the private chain will be considered valid, and\nconsequently selfish miners will gain the rewards of all new blocks.\n4.2. DAO Attack\nTable 8: Some other attacks that exploit smart contracts\u2019 vulnerabilities\nNumber Attack case Related vulnerabilities\n1 King of the Ether throne\nOut-of-gas send\nException disorder\n2 Multi-player games Field disclosure\n3 Rubixi attack Immutable bug\n4 GovernMental attack\nImmutable bug\nStack overflow\nUnpredictable state\nTimestamp dependence\n5 Dynamic libraries attack Unpredictable state\nThe DAO is a smart contract deployed in Ethereum on 28th May of 2016, which im-\nplements a crowd-funding platform. The DAO contract was attacked only after it has been\ndeployed for 20 days. Before the attack happened, DAO has already raised 150 million US$,\nwhich is the biggest crowdfund ever. The attacker stole about 60 million US$.\nThe attacker exploited the reentrancy vulnerability in this case. Firstly, the attacker\npublishes a malicious smart contract, which includes a withdraw() function call to DAO in\nits callback function. The withdraw() will send Ether to the callee, which is also in the\nform of call. Therefore, it will invoke the callback function of the malicious smart contract\nagain. In this way, the attacker is able to steal all the Ether from DAO. There are some\n15\nother cases that exploit smart contracts\u2019 vulnerabilities (described in Section 3.2.2), which\nare listed in Table 8 [20].\n4.3. BGP Hijacking Attack\nBGP (Border Gateway Protocol) is a de-facto routing protocol and regulates how IP\npackets are forwarded to their destination. To intercept the network traffic of blockchain,\nattackers either leverage or manipulate BGP routing. BGP hijacking typically requires the\ncontrol of network operators, which could potentially be exploited to delay network messages.\nMaria et al. [57] comprehensively analyze the impact of routing attacks, including both node-\nlevel and network-level attacks, on Bitcoin, and show that the number of the successfully\nto-be-hijacked Internet prefixes depends on the distribution of mining power. Because of\nthe high centralization of some Bitcoin mining pools, if they are attacked by BGP hijacking,\nit will have a significant effect. The attackers can effectively split the Bitcoin network, or\ndelay the speed of block propagation.\nAttackers conduct BGP hijacking to intercept Bitcoin miners\u2019 connections to a mining\npool server, as analyzed by Dell SecureWorks in 2014 [58]. By rerouting traffic to a mining\npool controlled by the attacker, it was possible to steal cryptocurrency from the victim.\nThis attack collected an estimated 83,000 US$ of cryptocurrency over a two month pe-\nriod. Since the BGP security extensions are not widely deployed, network operators have\nto rely on monitoring systems, which would report rogue announcements, such as BGP-\nMon [59]. However, even if an attack is detected, solving a hijacking still cost hours as it\nis a human-driven process consisting of altering configuration or disconnecting the attacker.\nFor example, YouTube ever took about three hours to resolve a hijacking of its prefixes by\na Pakistani ISP (Internet Service Provider) [60].\n4.4. Eclipse Attack\nTable 9: Some other attacks that may be caused by the eclipse attack\nNumber Attack Harm\n1 Engineering block races Wasting mining power on orphan blocks\n2 Splitting mining power 51% vulnerability may be triggered\n3 Selfish mining Attacker can gain more than normal mining rewards\n4 0-confirmation double spend\nThe vendor would not get rewards for its service\n5 N-confirmation double spend\nThe eclipse attack allows an attacker to monopolize all of the victim\u2019s incoming and\noutgoing connections, which isolates the victim from the other peers in the network [61].\nThen, the attacker can filter the victim\u2019s view of the blockchain, or let the victim cost\nunnecessary computing power on obsolete views of the blockchain. Furthermore, the attacker\nis able to leverage the victim\u2019s computing power to conduct its own malicious acts. Ethan\net al. [62] consider two types of eclipse attack on Bitcoin\u2019s peer-to-peer network, namely\nbotnet attack and infrastructure attack. The botnet attack is launched by bots with diverse\nIP address ranges. The infrastructure attack models the threat from an ISP, company\nor nation-state that has contiguous IP addresses. The Bitcoin network might suffer from\ndisruption and a victim\u2019s view of the blockchain will be filtered due to the eclipse attack.\nAdditionally, the eclipse attack is a useful basis for other attacks, as shown in Table 9 [62].\n16\n4.5. Liveness Attack\nBuild potential \nadvantage\nTX\nPrivately hold TX\nSlow down \npublic chain's \ngrowth\nBlock\nFigure 9: Overview of the liveness attack process\nAggelos et al. [63] propose the liveness attack, which is able to delay as much as possible\nthe confirmation time of a target transaction. They also present two instantiations of such\nattack on Bitcoin and Ethereum. Liveness attack consists of three phases, namely attack\npreparation phase, transaction denial phase, and blockchain retarder phase (shown in Fig.9):\n(1). Attack preparation phase. Just like selfish mining attack, an attacker builds advan-\ntage over honest miners in some way before the target transaction TX is broadcasted to the\npublic chain. The attacker builds the private chain, which is longer than the public chain.\n(2). Transaction denial phase. The attacker privately holds the block that contains TX,\nin order to prevent TX from being written into the public chain.\n(3). Blockchain retarder phase. In the growth process of the public chain, TX will no\nlonger be able to be privately held in a certain time. In this case, the attacker will publish\nthe block that contains TX. In some blockchain systems, when the depth of the block that\ncontains TX is greater than a constant, TX will be regarded valid. Therefore, the attacker\nwill continue building private chain in order to build an advantage over the public chain.\nAfter that, the attacker will publish her privately held blocks into public chain in proper\ntime to slow down the growth rate of public chain. The liveness attack will end when TX is\nverified as valid in the public chain.\n4.6. Balance Attack\nChristopher et al. [64] propose the balance attack against PoW-based blockchain, which\nallows a low-mining-power attacker to momently disrupt communications between subgroups\nwith similar mining power. They abstract blockchain into a DAG (Directed Acyclic Graph)\ntree, in which DAG = < B,P >. B are the nodes indicating blocks\u2019 information, and they\nare connected through directed edges P . After introducing a delay between correct sub-\ngroups of equivalent mining power, the attacker issues transactions in one subgroup (called\n\u201ctransaction subgroup\u201d) and mines blocks in another subgroup (called \u201cblock subgroup\u201d), to\nguarantee that the tree of block subgroup outweighs the tree of transaction subgroup. Even\nthough the transactions are committed, the attacker is able to outweigh the tree containing\nthis transaction and rewrite blocks with high probability.\nThe balance attack inherently violates the persistence of the main branch prefix and\nallows double spending. The attacker needs to identify the merchant-involved subgroup\nand create transactions to purchase goods from those merchants. Thereafter, the attacker\nissues transactions to this subgroup and propagates the mined blocks to the rest nodes of\nthe group. As long as the merchant ships goods, the attacker stops delaying messages.\n17\nWith a high probability that the DAG tree seen by the merchant is outweighed by another\ntree, the attacker could successfully reissue another transaction using exactly the same coins.\nBalance attack proves that PoW-based blockchain is block oblivious. That is, when writing a\ntransaction into the main chain, there is a certain probability that the attacker can override\nor delete the block containing this transaction. In the related experiment, the authors\nconfigure an Ethereum private chain with equivalent parameters of R3 consortium [65], and\nshowed that they can successfully carry out the balance attack, which only needs to control\nabout 5% of total computing power.\n5. Security Enhancements\nIn this section, we summarize security enhancements to blockchain systems, which can\nbe used in the development of blockchain systems.\n5.1. SmartPool\nParity or geth\nTXs\nParity or geth\nSmartpool client\nSmartpool client\nMiner\nMiner\nSmartpool contract\nSmartpool contract\nTasks\nCompleted shares\nShare batches\nRewards\nFigure 10: Overview of SmartPool\u2019s execution process\nAs described in Section 3.1.1, there already has mining pool with more than 40% of total\ncomputing power of blockchain. This poses a serious threat to the decentralization nature,\nmaking blockchain vulnerable to several kinds of attacks. Loi et al. [26] propose a novel\nmining pool system named SmartPool, whose workflow is shown in Fig.10. SmartPool\ngets the transactions from Ethereum node clients (i.e., parity [66] or geth [67]), which contain\nmining tasks information. Then, the miner conducts hashing computation based on the\ntasks and returns the completed shares to the smartpool client. When the number of the\ncompleted shares reaches to a certain amount, they will be committed to smartpool contract,\nwhich is deployed in Ethereum. The smartpool contract will verify the shares and deliver\nrewards to the client. Compared with the traditional P2P pool, SmartPool system has\nthe following advantages:\n(1). Decentralized. The core of the SmartPool is implemented in the form of smart\ncontract, which is deployed in blockchain. Miners need first connect to Ethereum to mine\nthrough the client. Mining pool can rely on Ethereum\u2019s consensus mechanism to run. In this\n18\nway, it ensures decentralization nature of pool miners. The mining pool state is maintained\nby Ethereum and no longer requires a pool operator.\n(2). Efficiency. Miners can send the completed shares to the smartpool contract in\nbatches. Furthermore, miners only need to send part of shares to be verified, not all shares.\nHence, SmartPool is more efficient than the P2P pool.\n(3). Secure. SmartPool leverages a novel data structure, which can prevent the\nattacker from resubmitting shares in different batches. Furthermore, the verification method\nof SmartPool can guarantee that honest miners will gain expected rewards even there exist\nmalicious miners in the pool.\n5.2. Quantitative Framework\nBlockchain \nsimulator\nSecurity \nmodel\nStale block rate\n\uf0b7 Consensus protocol parameters\n\uf0b7 Network parameters\n\uf0b7 Block propagation times\n\uf0b7 Block sizes\n\uf0b7 Network delays\n\uf0b7 Throughput\n\uf0b7 Optimal adversarial strategy\n\uf0b7 Security provisions\n\uf0b7 Security parameters\nFigure 11: Components of quantitative framework\nThere exist tradeoffs between blockchain\u2019s performance and security. Arthur et al. [68]\npropose a quantitative framework, which is leveraged to analyze PoW-based blockchain\u2019s\nexecution performance and security provisions. As shown in Fig.11, the framework has two\ncomponents: blockchain stimulator and security model. The stimulator mimics blockchain\u2019s\nexecution, whose inputs are parameters of consensus protocol and network. Through the\nsimulator\u2019s analysis, it can gain performance statistics of the target blockchain, including\nblock propagation times, block sizes, network delays, stale block rate, throughput, etc. The\nstale block refers to a block that is mined but not written to the public chain. The throughput\nis the number of transactions that the blockchain can handle per second. Stale block rate\nwill be passed as a parameter to the security model component, which is based on MDP\n(Markov Decision Processes) for defeating double spending and selfish mining attacks. The\nframework eventually outputs optimal adversarial strategy against attacks, and facilitates\nbuilding security provisions for the blockchain.\n5.3. Oyente\nLoi et al. [17] propose Oyente to detect bugs in Ethereum smart contracts. Oyente\nleverages symbolic execution to analyze the bytecode of smart contracts and it follows the\n19\nexecution model of EVM. Since Ethereum stores the bytecode of smart contracts in its\nblockchain, Oyente can be used to detect bugs in deployed contracts.\nCFG BUILDER\nContract's \nbytecode\nEthereum \nstate\nZ3 Solver\nVISUALIZER\nVALIDATOR\nCORE \nANALYSIS\nEXPLORER\nFigure 12: Overview of Oyente\u2019s architecture design and execution process\nFig.12 shows Oyente\u2019s architecture and execution process. It takes the smart con-\ntract\u2019s bytecode and Ethereum global state as inputs. Firstly, based on the bytecode, CFG\nBUILDER will statically build CFG (Control Flow Graph) of smart contract. Then, accord-\ning to Ethereum state and CFG information, EXPLORER conducts simulated execution of\nsmart contract leveraging static symbolic execution. In this process, CFG will be further\nenriched and improved because some jump targets are not constants; instead, they should\nbe computed during symbolic execution. The CORE ANALYSIS module uses the related anal-\nysis algorithms to detect four different vulnerabilities (described in Section 3.2.2). The\nVALIDATOR module validates the detected vulnerabilities and vulnerable paths. Confirmed\nvulnerability and CFG information will finally be output to the VISUALIZER module, which\ncan be employed by users to carry out debugging and program analysis. Currently, Oyente\nis open source for public use [69].\n5.4. Hawk\nAs described in Section 3.1.5, privacy leakage is a serious threat to blockchain. In the\nera of blockchain 2.0, not only transactions but also contract-related information are public,\nsuch as contract\u2019s bytecode, invoking parameters, etc.\nAhmed et al. [70] propose Hawk, a novel framework for developing privacy-preserving\nsmart contracts. Leveraging Hawk, developers can write private smart contracts, and it is\nnot necessary for them to use any code encryption or obfuscation techniques. Furthermore,\nthe financial transaction\u2019s information will not be explicitly stored in blockchain. When\nprogrammers develop Hawk contract, the contract can be divided into two parts: private\nportion, and public portion. The private data and financial function related codes can be\nwritten into the private portion, and codes that do not involve private information can be\nwritten into the public portion. The Hawk contract is compiled into three pieces. (1). The\nprogram that will be executed in all virtual machines of nodes, just like smart contracts in\nEthereum. (2). The program that will only be executed by the users of smart contracts. (3).\nThe program that will be executed by the manager, which is a special trustworthy party in\nHawk. The Hawk manager is executed in Intel SGX enclave (described in Section 3.1.3),\nand it can see the privacy information of the contract but will not disclose it. Hawk can not\n20\nonly protect privacy against the public, but also protect the privacy between different Hawk\ncontracts. If the manager aborts the protocol of Hawk, it will be automatically financially\npenalized, and the users will gain compensation. Overall, Hawk can largely protect the\nprivacy of users when they are using blockchains.\n5.5. Town Crier\nTC smart contract\nRelay\nHTTPS \nwebsites\nUsers' smart \ncontract\nSGX-enabled host\nenclave\nTC serverEthereum\nData source\nFigure 13: Basic architecture of Town Crier system\nSmart contract often needs to interact with off-chain (i.e., external) data source. Zhang\net al. [49] propose TC (Town Crier), which is an authenticated data feed system for\nthis data interaction process. Since the smart contract deployed in blockchain cannot access\nnetwork directly, they cannot get data through HTTPS. TC exactly acts as a bridge between\nHTTPS-enabled data source and smart contracts. The basic architecture of TC is shown\nin Fig.13. TC contract is the front end of the TC system, which acts as API between\nusers\u2019 contracts and TC server. The core program of TC is running in Intel SGX enclave\n(described in Section 3.1.3). The main function of the TC server is to obtain the data\nrequests from users\u2019 contracts, and obtain the data from target HTTPS-enabled websites.\nFinally, the TC server will return a datagram to the users\u2019 contracts in the form of digitally\nsigned blockchain messages.\nTC can largely protect the security of the data requesting process. The core modules\nof TC are respectively running on decentralized Ethereum, SGX-enabled enclave, and\nHTTPS-enabled website. Furthermore, the enclave disables the function of network con-\nnection to maximize its security. Relay module is designed as a network communication\nhub for smart contracts, SGX enclave environment, and data source websites. Therefore, it\nachieves isolation between network communication and the execution of TC\u2019s core program.\nEven if the Relay module is attacked, or the network communication packets are tampered,\nit will not change the normal function of TC. TC system provides a robust security model\nfor the smart contracts\u2019 off-chain data interaction, and it has already been launched online\nas a public service [71].\n21\n6. Future Directions\nBased on the above systematic examination on the security of current blockchain sys-\ntems, we list a few future directions to stir up research efforts into this area. First, nowadays\nthe most popular consensus mechanism used in blockchain is PoW. However, a major dis-\nadvantage of PoW is the waste of computing resources. To solve this problem, Ethereum is\ntrying to develop a hybrid consensus mechanism of PoW and PoS. Conducting researches\nand developing more efficient consensus mechanisms will make a significant contribution\nto the development of blockchain. Second, with the growth of the number of feature-rich\ndAPPs, the privacy leakage risk of blockchain will be more serious. A dAPP itself, as well as\nthe process of communication between the dAPP and Internet, are both faced with privacy\nleakage risks. There are some interesting techniques that can be applied in this problem:\ncode obfuscation, application hardening, execution trusted computing (e.g., Intel SGX), etc.\nThird, the blockchain will produce a lot of data, including block information, transaction\ndata, contract bytecode, etc. However, not all of the data stored in blockchain is valid. For\nexample, a smart contract can erase its code by SUICIDE or SELFDESTRUCT, but the address\nof the contract will not be erased. In addition, there are a lot of smart contracts containing\nno code or totally the same code in Ethereum, and many smart contracts are never be ex-\necuted after its deployment. An efficient data cleanup and detection mechanism is desired\nto improve the execution efficiency of blockchain systems.\n7. Conclusion\nIn this paper, we focus on the security issues of blockchain technology. By studying the\npopular blockchain systems (e.g., Ethereum, Bitcoin, Monero, etc.), we conduct a systematic\nexamination on the security risks to blockchain. For each risk or vulnerability, we analyze its\ncauses and possible consequence. Furthermore, we survey the real attacks on the blockchain\nsystems, and analyze the vulnerabilities exploited in these attacks. Finally, we summarize\nblockchain security enhancements and suggest a few future directions in this area.\nAcknowledgements\nThis work is supported in part by the National Science Foundation of China (No.61471228),\nthe Key Project of Guangdong Province Science & Technology Plan (No.2015B020233018),\nthe National Natural Science Foundation of China (No.61402080, No.61572115, No.61502086,\nNo.61572109), and China Postdoctoral Science Foundation founded project (No.2014M562307).\nReferences\n[1] J. DESJARDINS, Its official: Bitcoin was the top performing currency of 2015 (2016).\nURL http://money.visualcapitalist.com/its-official-bitcoin-was-the-top-performing-cur\nrency-of-2015/\n[2] J. Adinolfi, And 2016s best-performing commodity is ... bitcoin? (2016).\nURL http://www.marketwatch.com/story/and-2016s-best-performing-commodity-is-bitcoin\n-2016-12-22\n22\n[3] blockchain.info, Confirmed transactions per day (2017).\nURL https://blockchain.info/charts/n-transactions?timespan=all#\n[4] A. Ekblaw, A. Azaria, J. D. Halamka, A. Lippman, A case study for blockchain in healthcare: \u201cmedrec\u201d\nprototype for electronic health records and medical research data (2016).\nURL https://www.media.mit.edu/publications/medrec-whitepaper/\n[5] A. Azaria, A. Ekblaw, T. Vieira, A. Lippman, Medrec: Using blockchain for medical data access and\npermission management, in: International Conference on Open and Big Data (OBD), 2016, pp. 25-30.\n[6] X. Yue, H. Wang, D. Jin, M. Li, W. Jiang, Healthcare data gateways: Found healthcare intelligence on\nblockchain with novel privacy risk control, in: Journal of medical systems, 2016, p. 218.\n[7] S. Huckle, R. Bhattacharya, M. White, N. Beloff, Internet of things, blockchain and shared economy\napplications, in: Procedia Computer Science, Vol. 98, 2016, pp. 461-466.\n[8] P. Bylica, L. Glen, P. Janiuk, A. Skrzypczak, A. Zaw locki, A probabilistic nanopayment scheme for\ngolem, 2015.\nURL http://golemproject.net/doc/GolemNanopayments.pdf\n[9] P. Hurich, The virtual is real: An argument for characterizing bitcoins as private property, in: Banking\n& Finance Law Review, Vol. 31, Carswell Publishing, 2016, p. 573.\n[10] A. Dorri, S. S. Kanhere, R. Jurdak, P. Gauravaram, Blockchain for iot security and privacy: The case\nstudy of a smart home, in: IEEE Percom workshop on security privacy and trust in the internet of thing,\n2017.\n[11] Y. Zhang, J. Wen, The iot electric business model: Using blockchain technology for the internet of\nthings, in: Peer-to-Peer Networking and Applications, 2016, pp. 1-12.\n[12] J. Sun, J. Yan, K. Z. Zhang, Blockchain-based sharing services: What blockchain technology can\ncontribute to smart cities, in: Financial Innovation, 2016, p. 26.\n[13] X. Xu, C. Pautasso, L. Zhu, V. Gramoli, A. Ponomarev, A. B. Tran, S. Chen, The blockchain as a\nsoftware connector, in: The 13th Working IEEE/IFIP Conference on Software Architecture, 2016.\n[14] E.Nordstro\u00a8m, Personal clouds: Concedo, Masters thesis, Lulea University of Technology (2015).\n[15] J. S. Czepluch, N. Z. Lollike, S. O. Malone, The use of block chain technology in different application\ndomains, in: The IT University of Copenhagen, Copenhagen, 2015.\n[16] Ethereum, Etherscan: The ethereum block explorer (2017).\n[17] L. Luu, D.-H. Chu, H. Olickel, P. Saxena, A. Hobor, Making smart contracts smarter, in: The ACM\nSIGSAC Conference on Computer and Communications Security, 2016, pp. 254-269.\n[18] V. Buterin, Critical update re: Dao vulnerability (2016).\nURL https://blog.ethereum.org/2016/06/17/critical-update-re-dao-vulnerability/\n[19] J. Adelstein, Behind the biggest bitcoin heist in history: Inside the implosion of mt.gox (2016).\nURL http://www.thedailybeast.com/articles/2016/05/19/behind-the-biggest-bitcoin-heist\n-in-history-inside-the-implosion-of-mt-gox.html\n[20] N. Atzei, M. Bartoletti, T. Cimoli, A survey of attacks on ethereum smart contracts (sok), in: Inter-\nnational Conference on Principles of Security and Trust, 2017, pp. 164-186.\n[21] Z. Zheng, S. Xie, H.-N. Dai, H. Wang, Blockchain challenges and opportunities: A survey, in: Interna-\ntional Journal of Web and Grid Services, 2016.\n[22] M. Ghosh, M. Richardson, B. Ford, R. Jansen, A torpath to torcoin, proof-of-bandwidth altcoins for\ncompensating relays (2014).\nURL https://www.smithandcrown.com/open-research/a-torpath-to-torcoin-proof-of-bandwid\nth-altcoins-for-compensating-relays/\n[23] Intel, Proof of elapsed time (poet) (2017).\nURL http://intelledger.github.io/\n[24] P. technologies, Proof of authority chains (2017).\nURL https://github.com/paritytech/parity/wiki/Proof-of-Authority-Chains\n[25] E. community, Kovan - stable ethereum public testnet (2017).\nURL https://github.com/kovan-testnet/proposal\n[26] L. Luu, Y. Velner, J. Teutsch, P. Saxena, Smart pool: Practical decentralized pooled mining, in:\n23\nUSENIX Security Symposium, 2017.\n[27] Karl, Security of blockchain technologies, Ph.D. thesis, Swiss Federal Institute of Technology (2016).\n[28] Karl, Ethereum eclipse attacks, 2016.\nURL http://e-collection.library.ethz.ch/view/eth:49728\n[29] A. Gervais, G. O. Karame, K. Wu\u00a8st, V. Glykantzis, H. Ritzdorf, S. Capkun, On the security and\nperformance of proof of work blockchains, in: The 2016 ACM SIGSAC Conference on Computer and\nCommunications Security, 2016, pp. 3-16.\n[30] CoinMarketCap, Cryptocurrency market capitalizations (2017).\nURL https://coinmarketcap.com/\n[31] M. Swan, Blockchain: Blueprint for a new economy, OReilly Media, 2015.\n[32] B. L. S.A., Bitcoin wallet (2017).\nURL https://blockchain.info/wallet/#/\n[33] BlockGeeks, What is cryptocurrency: Everything you need to know (2016).\nURL https://blockgeeks.com/guides/what-is-cryptocurrency/\n[34] M. Bartoletti, L. Pompianu, An empirical analysis of smart contracts: platforms, applications, and\ndesign patterns, in: 1st Workshop on Trusted Smart Contracts, 2017.\n[35] BlockGeeks, Smart contracts: The blockchain technology that will replace lawyers (2016).\nURL https://blockgeeks.com/guides/smart-contracts/\n[36] N. Hajdarbegovic, Bitcoin miners ditch ghash.io pool over fears of 51% attack (2014).\nURL http://www.coindesk.com/bitcoin-miners-ditch-ghash-io-pool-51-attack/\n[37] Dean, 51% attack (2015).\nURL http://cryptorials.io/glossary/51-attack/\n[38] H. Mayer, Ecdsa security in bitcoin and ethereum: a research survey, 2016.\nURL http://blog.coinfabrik.com/wp-content/uploads/2016/06/ECDSA-Security-in-Bitcoin-a\nnd-Ethereum-a-Research-Survey.pdf\n[39] S. Alliance, Know your ransomware: Ctb-locker (2017).\nURL https://www.secalliance.com/blog/ransomware-ctb-locker/\n[40] S. news, The current state of ransomware: Ctb-locker (2015).\nURL https://news.sophos.com/en-us/2015/12/31/the-current-state-of-ransomware-ctb-loc\nker/\n[41] Wikipedia, Wannacry ransomware attack (2017).\nURL https://en.wikipedia.org/wiki/WannaCry_ransomware_attack\n[42] N. Christin, Traveling the silk road: A measurement analysis of a large anonymous online marketplace,\nin: The 22nd international conference on World Wide Web, 2013, pp. 213-224.\n[43] H. Treasury, Uk national risk assessment of money laundering and terrorist financing (2015).\nURL https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/468210/\nUK_NRA_October_2015_final_web.pdf\n[44] W. Cody, T. Amir, Darkwallet (2017).\nURL https://darkwallet.is/\n[45] G. O. Karame, E. Androulaki, M. Roeschlin, A. Gervais, S. Capkun, Misbehavior in bitcoin: A study\nof double-spending and accountability, in: ACM Transactions on Information and System Security, 2015.\n[46] G. O. Karame, E. Androulaki, S. Capkun, Double-spending fast payments in bitcoin, in: Proceedings\nof the ACM conference on Computer and communications security, 2012, pp. 906-917.\n[47] A. Miller, M. Mo\u00a8ser, K. Lee, A. Narayanan, An empirical analysis of linkability in the monero\nblockchain, in: arXiv preprint:1704.04299, 2017.\n[48] A. Juels, A. Kosba, E. Shi, The ring of gyges: Investigating the future of criminal smart contracts, in:\nThe ACM SIGSAC Conference on Computer and Communications Security, 2016, pp. 283-295.\n[49] F. Zhang, E. Cecchetti, K. Croman, A. Juels, E. Shi, Town crier: An authenticated data feed for smart\ncontracts, in: Proceedings of the ACM SIGSAC Conference on Computer and Communications Security,\n2016, pp. 270-282.\n[50] T. Chen, X. Li, X. Luo, X. Zhang, Under-optimized smart contracts devour your money, in: IEEE\n24\n24th International Conference on Software Analysis, Evolution and Reengineering (SANER), 2017, pp.\n442-446.\n[51] E. community, The \u201cyellow paper\u201d: Ethereum\u2019s formal specification (2017).\nURL https://github.com/ethereum/yellowpaper\n[52] Gautham, Ethereum network comes across yet another dos attack (2016).\nURL http://www.newsbtc.com/2016/09/23/ethereum-dao-attack-attack-platforms-credibility\n/\n[53] B. Rivlin, Vitalik buterin on empty accounts and the ethereum state (2016).\nURL https://www.ethnews.com/vitalik-buterin-on-empty-accounts-and-the-ethereum-state\n[54] E. community, Long-term gas cost changes for io-heavy operations to mitigate transaction spam attacks\n(2016).\nURL https://github.com/ethereum/EIPs/issues/150\n[55] S. Solat, M. Potop-Butucaru, Zeroblock: Preventing selfish mining in bitcoin, Ph.D. thesis, University\nof Paris (2016).\n[56] I. Eyal, E. G. Sirer, Majority is not enough: Bitcoin mining is vulnerable, in: Financial Cryptography\nand Data Security - 18th International Conference, Lecture Notes in Computer Science, 2014, pp. 436-454.\n[57] M. Apostolaki, A. Zohar, L. Vanbever, Hijacking bitcoin: Routing attacks on cryptocurrencies, in:\nIEEE Symposium on Security and Privacy, 2017, pp. 375-392.\n[58] D. SecureWorks, BGP hijacking for cryptocurrency profit (2014).\nURL https://www.secureworks.com/research/bgp-hijacking-for-cryptocurrency-profit\n[59] H. Yan, R. Oliveira, K. Burnett, D. Matthews, L. Zhang, D. Massey, BGPmon: A real-time, scal-\nable, extensible monitoring system, in: Cybersecurity Applications Technology Conference for Homeland\nSecurity, 2009, pp. 212-223.\n[60] D. Research, Pakistan hijacks youtube (2008).\nURL http://research.dyn.com/2008/02/pakistan-hijacks-youtube-1/\n[61] A. Singh, T. Ngan, P. Druschel, D. S. Wallach, Eclipse attacks on overlay networks: Threats and\ndefenses, in: 25th IEEE International Conference on Computer Communications, Joint Conference of the\nIEEE Computer and Communications Societies, 2006.\n[62] E. Heilman, A. Kendler, A. Zohar, S. Goldberg, Eclipse attacks on bitcoin\u2019s peer-to-peer network, in:\n24th USENIX Security Symposium, 2015, pp. 129-144.\n[63] A. Kiayias, G. Panagiotakos, On trees, chains and fast transactions in the blockchain, 2016.\nURL https://eprint.iacr.org/2016/545.pdf\n[64] C. Natoli, V. Gramoli, The balance attack against proof-of-work blockchains: The r3 testbed as an\nexample, in: arXiv preprint:1612.09426, 2016.\n[65] R. consortium, R3 (2017).\nURL https://www.r3.com/\n[66] P. technologies, Parity (2017).\nURL https://parity.io/\n[67] E. community, Official go implementation of the ethereum protocol (2017).\nURL https://github.com/ethereum/go-ethereum\n[68] A. Gervais, G. O. Karame, K. Wust, V. Glykantzis, H. Ritzdorf, S. Capkun, On the security and perfor-\nmance of proof of work blockchains, in: The ACM SIGSAC Conference on Computer and Communications\nSecurity, 2016, pp. 3-16.\n[69] L. Luu, D. Chu, H. Olickel, P. Saxena, A. Hobor, Oyente: An analysis tool for smart contracts (2016).\nURL https://www.comp.nus.edu.sg/~loiluu/oyente.html\n[70] A. Kosba, A. Miller, E. Shi, Z. Wen, C. Papamanthou, Hawk: The blockchain model of cryptography\nand privacy-preserving smart contracts, in: IEEE Symposium on Security and Privacy, 2016, pp. 839-858.\n[71] F. Zhang, E. Cecchetti, K. Croman, A. Juels, E. Shi, Town crier (2017).\nURL http://www.town-crier.org/\n25\n",
            "id": 49553132,
            "identifiers": [
                {
                    "identifier": "151252397",
                    "type": "CORE_ID"
                },
                {
                    "identifier": "oai:arxiv.org:1802.06993",
                    "type": "OAI_ID"
                },
                {
                    "identifier": "1802.06993",
                    "type": "ARXIV_ID"
                }
            ],
            "title": "A Survey on the Security of Blockchain Systems",
            "language": {
                "code": "en",
                "name": "English"
            },
            "magId": null,
            "oaiIds": [
                "oai:arxiv.org:1802.06993"
            ],
            "publishedDate": "2020-11-04T00:00:00",
            "publisher": "",
            "pubmedId": null,
            "references": [],
            "sourceFulltextUrls": [
                "http://arxiv.org/abs/1802.06993"
            ],
            "updatedDate": "2021-03-02T01:38:27",
            "yearPublished": 2020,
            "journals": [],
            "links": [
                {
                    "type": "download",
                    "url": "http://arxiv.org/abs/1802.06993"
                },
                {
                    "type": "display",
                    "url": "https://core.ac.uk/works/49553132"
                }
            ]
        }
    ],
    "tooks": null,
    "esTook": null
}